# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: build-${{ matrix.os }} ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rids: -r win-x64
            artifact: publish-win-x64
          - os: windows-latest
            rids: -r win-arm64
            artifact: publish-win-arm64
          - os: windows-latest
            rids: -r osx-arm64 -r osx-x64
            artifact: publish-universal-arm64
          # - os: macos-latest
          #   rids: -r osx-arm64
          #   artifact: publish-osx-arm64
          #   wineprefix: /Users/runner/.winemonogame
          # - os: macos-13
          #   rids: -r osx-x64
          #   artifact: publish-osx-x64
          #   wineprefix: /Users/runner/.winemonogame
          - os: ubuntu-latest
            rids: -r linux-x64
            artifact: publish-linux-x64
            wineprefix: /home/runner/.winemonogame
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Delete ./${{ matrix.wineprefix }}
      if: runner.os != 'Windows'
      run: rm -Rf ./${{ matrix.wineprefix }}
    - name: Install Dependencies
      run: |
            if [ "$RUNNER_OS" == "Linux" ]; then
                  sudo apt install p7zip-full curl
                  sudo dpkg --add-architecture i386 
                  sudo mkdir -pm755 /etc/apt/keyrings
                  sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
                  sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
                  sudo apt update && sudo apt install --install-recommends winehq-stable
                  echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | sudo debconf-set-selections
                  sudo apt install -y ttf-mscorefonts-installer
                  sudo fc-cache
                  fc-match Arial
                  wine --version
                  wget -qO- https://monogame.net/downloads/net9_mgfxc_wine_setup.sh | bash
            elif [ "$RUNNER_OS" == "macOS" ]; then
                  dotnet workload install macos
                  brew install wget p7zip curl freetype freeimage
                  sudo mkdir -p /usr/local/lib
                  sudo ln -sf /opt/homebrew/lib/libfreetype.6.dylib /usr/local/lib/libfreetype6.dylib
                  sudo ln -sf /opt/homebrew/lib/libfreeimage.3.dylib /usr/local/lib/libfreeimage.dylib
            fi
      shell: bash
      #https://dl.winehq.org/wine-builds/macosx/pool/portable-winehq-stable-5.0-osx64.tar.gz
    - name: Install MonoPack
      run: |
            dotnet tool install MonoPack
      shell: bash
    - name: Restore dependencies
      run: dotnet restore
    - name: Delete ./${{ matrix.artifact }}
      run: rm -Rf ./${{ matrix.artifact }}
      shell: bash
    - name: Install Rosetta
      if: runner.os == 'macOS'
      continue-on-error: true
      run: |
        softwareupdate --install-rosetta --agree-to-license
        /usr/bin/pgrep oahd >/dev/null && echo "Rosetta is installed" || echo "Rosetta is not installed"
    - name: Install Wine Dependencies
      if: runner.os == 'macOS'
      run: |
        brew install libpng libjpeg libtiff
        brew install --cask xquartz wine-stable
        xattr -dr com.apple.quarantine "/Applications/Wine Stable.app"
        wine --version
        which wine
        sudo ln -s /usr/local/bin/wine /usr/local/bin/wine64
        wget -qO- https://monogame.net/downloads/net9_mgfxc_wine_setup.sh | bash
        rm -f ${{ matrix.wineprefix }}/wine64
        find ${{ matrix.wineprefix }}
        export WINEPREFIX=${{ matrix.wineprefix }}
        wine64 dotnet --info
      shell: bash
    - name: Update Path
      if: runner.os != 'Windows'
      run: |
        echo "/opt/homebrew/lib:/usr/local/lib:/usr/local/bin" >> $GITHUB_PATH
      shell: bash
    # - name: Check Wine
    #   if: runner.os != 'Windows'
    #   run: |
    #     export WINEPREFIX=${{ github.workspace }}/.winemonogame
    #     export PATH=/usr/local/bin:$PATH
    #     mkdir -p $WINEPREFIX
    #     export WINEDEBUG=+all
    #     export WINEARCH=win64
    #     wine64 wineboot || true
    #     find $WINEPREFIX
    #   shell: bash
    #   env:
    #     WINEPREFIX: ${{ github.workspace }}/.winemonogame
    - name: Build
      run: |
        echo $DYLD_LIBRARY_PATH
        dotnet build VectorRumble.Desktop/VectorRumble.Desktop.csproj -c Release -v:diag -tl:off
      shell: bash
      env:
        MGFXC_WINE_PATH: ${{ matrix.wineprefix }}
        DYLD_LIBRARY_PATH: /usr/lib:/usr/local/lib:/opt/homebrew/lib:/usr/local/bin:$DYLD_LIBRARY_PATH
    - name: Package
      run: dotnet monopack -p VectorRumble.Desktop/VectorRumble.Desktop.csproj -o ./${{ matrix.artifact }} ${{ matrix.rids }} -i ./Info.plist -c ./VectorRumble.icns -v
      shell: bash
      env:
        MGFXC_WINE_PATH: ${{ matrix.wineprefix }}
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ./${{ matrix.artifact }}

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: windows
            rid: win-x64
            archive: .zip
          - os: macos
            rid: osx-arm64
            archive: .zip
          - os: linux
            rid: linux-x64
            archive: .zip
      fail-fast: false
    needs: build
    steps:
      - name: Download
        uses: actions/download-artifact@v4
        with:
          name: publish-${{ matrix.rid }}
      - name: Install butler
        run: |
              if [ "$RUNNER_OS" == "Linux" ]; then
                    curl -L https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default -o butler.zip
                    7z x butler.zip
                    ./butler version
              elif [ "$RUNNER_OS" == "Windows" ]; then
                    curl -L https://broth.itch.ovh/butler/windows-amd64/LATEST/archive/default -o butler.zip
                    7z x butler.zip
                    ./butler version
              elif [ "$RUNNER_OS" == "macOS" ]; then
                    curl -L https://broth.itch.ovh/butler/darwin-amd64/LATEST/archive/default -o butler.zip
                    7z x butler.zip
                    ./butler version
              fi
        shell: bash
      - name: Generate appversion.txt
        run: |
              echo ${{ github.ref_name }} | sed 's/^v//' > appversion.txt
              cat appversion.txt
              find .
        shell: bash
      # - name: Publish
      #   run: |
      #         ./butler push ./VectorRumble.Desktop-${{ matrix.rid }}${{ matrix.archive }} ${{ secrets.ITCHIO_USER }}/${{ secrets.ITCHIO_GAME }}:${{ matrix.os }}-alpha --userversion-file appversion.txt -v
      #   shell: bash
      #   env:
      #     BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

